name: Git Fame

on:
  pull_request:
    branches:
      - main
permissions:
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # fetch the entire history

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install git-fame
        run: pip install git-fame

      - name: Run git fame and capture output
        id: run-git-fame
        run: |
          git fame --incl=.java --loc --bytype -w -M -C -R ./core/src/main > git-fame-output.txt
          
          # Read the output from the file and set it as an output variable
          output=$(cat git-fame-output.txt)
          echo "::set-output name=git-fame-output::${output}"

        # Store the git fame output in a file for later use
        continue-on-error: true

      - name: Comment on PR with git fame output
        if: always() # Comment even if previous steps failed
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            
            // Read the git fame output from the file and set it as a comment body
            const output = execSync('cat git-fame-output.txt', { encoding: 'utf-8' });
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo.owner + '/' + context.repo.repo;
            github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `Git Fame Output for this PR:\n\`\`\`\n${output}\n\`\`\``
            });